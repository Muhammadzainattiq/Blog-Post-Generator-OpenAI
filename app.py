import streamlit as st
from openai import OpenAI
import requests


def generate_content(topic, api_key):
    client = OpenAI(api_key = api_key)
    conversation = [
        {"role": "system", "content": "You are a helpful AI assistant, here to help you write a blog post. you will be given a topic on which you will write a interesting and comprehensive blog post. It should be atleast 400 words long. The post should be including a title, related keywords, SEO meta title, SEO meta description of the blog post at the end"},
        {"role": "user", "content": f"Write a blog post on the topic of '{topic}'"},
    ]

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",  # Adjust model if needed
        messages=conversation,
        max_tokens=500,
        temperature=0.8,
        n=1,
    )

    content = response.choices[0].message.content.strip().split("\n\n")
    return content
def generate_image_and_content(topic, api_key):
    """
    Generates blog post content using OpenAI's chat completions.

    Args:
        topic: The user-provided topic for the blog post.

    Returns:
        A dictionary containing the generated content.
    """
    client = OpenAI(api_key = api_key)
    conversation = [
        {"role": "system", "content": "You are a helpful AI assistant, here to help you write a blog post. you will be given a topic on which you will write a interesting and comprehensive blog post. It should be atleast 400 words long. The post should be including a title, related keywords, SEO meta title, SEO meta description of the blog post at the end"},
        {"role": "user", "content": f"Write a blog post on the topic of '{topic}'"},
    ]

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",  # Adjust model if needed
        messages=conversation,
        max_tokens=500,
        temperature=0.8,
        n=1,
    )

    content = response.choices[0].message.content.strip().split("\n\n")

    image = client.images.generate(
  model="dall-e-2",
  prompt=f"a general photo related to: {topic}",
  size="1024x1024",
  quality="standard",
  n=1,
)
    image_url = image.data[0].url
    return content, image_url


def main():
    """
    Streamlit app for generating blog post drafts.
    """
    st.set_page_config(page_title = "Blog Generator", page_icon="✍️")
    created_style = """
    color: #888888; /* Light gray color */
    font-size: 99px; /* Increased font size */
"""
    st.markdown("<p style='{}'>➡️created by 'Muhammad Zain Attiq'</p>".format(created_style), unsafe_allow_html=True)
    st.title("Blog Post Generator")
    with st.sidebar:
        input_api_key = st.text_input("Enter your OpenAI API Key: ")
        if input_api_key:
             st.success("Done")

    topic = st.text_input("Enter a topic for your blog post:")
    if_image = st.checkbox("Add Image")
    if st.button("Generate Post"):
        if input_api_key:
            if topic:
                content = None
                image_url = None
                with st.spinner("Generating your blog post..."):
                    if if_image:
                        content, image_url = generate_image_and_content(topic, input_api_key)
                    else:
                         content = generate_content(topic, input_api_key)
                if image_url:
                                st.image(image_url, caption="Found Image", use_column_width=True)
                else:
                    st.write("No Image Added.")
                # Display title
                st.markdown(f"## {content[0]}")  # Assuming title is the first element

                # Display content sections with markdown formatting
                for section in content[1:]:
                    st.write("_____________________________________________________________________")
                    st.markdown(f"{section}\n")

                

                st.write(
                    "\n**Note:** This is a draft generated by AI. It may require editing and additional research to ensure accuracy and completeness."
                )
            else:
                st.error("Please enter a topic.")
        else:
             st.warning("No API key found")

if __name__ == "__main__":
    main()
